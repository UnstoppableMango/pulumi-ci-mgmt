diff --git a/native-provider-ci/src/workflows.ts b/native-provider-ci/src/workflows.ts
index 300f8bf03..86675e927 100644
--- a/native-provider-ci/src/workflows.ts
+++ b/native-provider-ci/src/workflows.ts
@@ -4,7 +4,7 @@ import * as steps from "./steps";
 import { Step } from "./steps";
 
 const pythonVersion = "3.11";
-const goVersion = "1.21.x";
+const goVersion = "1.22.x";
 const nodeVersion = "20.x";
 const dotnetVersion = "6.0.x\n3.1.301\n";
 const javaVersion = "11";
@@ -32,7 +32,6 @@ export const WorkflowOpts = z.object({
 const env = (opts: WorkflowOpts) =>
   Object.assign(
     {
-      GITHUB_TOKEN: "${{ secrets.PULUMI_BOT_TOKEN }}",
       PROVIDER: opts.provider,
       PULUMI_ACCESS_TOKEN: "${{ secrets.PULUMI_ACCESS_TOKEN }}",
       PULUMI_LOCAL_NUGET: "${{ github.workspace }}/nuget",
@@ -41,14 +40,7 @@ const env = (opts: WorkflowOpts) =>
       NUGET_PUBLISH_KEY: "${{ secrets.NUGET_PUBLISH_KEY }}",
       PYPI_USERNAME: "__token__",
       PYPI_PASSWORD: "${{ secrets.PYPI_API_TOKEN }}",
-      TRAVIS_OS_NAME: "linux",
-      SLACK_WEBHOOK_URL: "${{ secrets.SLACK_WEBHOOK_URL }}",
       PULUMI_GO_DEP_ROOT: "${{ github.workspace }}/..",
-      PUBLISH_REPO_USERNAME: "${{ secrets.OSSRH_USERNAME }}",
-      PUBLISH_REPO_PASSWORD: "${{ secrets.OSSRH_PASSWORD }}",
-      SIGNING_KEY_ID: "${{ secrets.JAVA_SIGNING_KEY_ID }}",
-      SIGNING_KEY: "${{ secrets.JAVA_SIGNING_KEY }}",
-      SIGNING_PASSWORD: "${{ secrets.JAVA_SIGNING_PASSWORD }}",
       GOVERSION: goVersion,
       NODEVERSION: nodeVersion,
       PYTHONVERSION: pythonVersion,
@@ -98,12 +90,9 @@ export function PullRequestWorkflow(
     },
     env: env(opts),
     jobs: {
-      "comment-on-pr": new EmptyJob("comment-on-pr")
-        .addConditional(
-          "github.event.pull_request.head.repo.full_name != github.repository"
-        )
-        .addStep(steps.CheckoutRepoStep())
-        .addStep(steps.CommentPRWithSlashCommandStep()),
+      "comment-on-pr": new EmptyJob("comment-on-pr").addStep(
+        steps.CheckoutRepoStep()
+      ),
     },
   };
 }
@@ -193,7 +182,7 @@ export function BuildWorkflow(
     name: name,
     on: {
       push: {
-        branches: ["master", "main", "feature-**"],
+        branches: ["main"],
         "paths-ignore": ["CHANGELOG.md"],
         "tags-ignore": ["v*", "sdk/*", "**"],
       },
@@ -208,7 +197,8 @@ export function BuildWorkflow(
       test: new TestsJob(name, "test", opts),
       publish: new PublishPrereleaseJob("publish", opts),
       publish_sdk: new PublishSDKJob("publish_sdk"),
-      publish_java_sdk: new PublishJavaSDKJob("publish_java_sdk"),
+      // I don't understand java publishing
+      // publish_java_sdk: new PublishJavaSDKJob("publish_java_sdk"),
     },
   };
   if (opts.lint) {
@@ -252,7 +242,8 @@ export function PrereleaseWorkflow(
       test: new TestsJob(name, "test", opts),
       publish: new PublishPrereleaseJob("publish", opts),
       publish_sdk: new PublishSDKJob("publish_sdk"),
-      publish_java_sdk: new PublishJavaSDKJob("publish_java_sdk"),
+      // I don't understand java publishing
+      // publish_java_sdk: new PublishJavaSDKJob("publish_java_sdk"),
       publish_go_sdk: new PublishGoSdkJob(),
     },
   };
@@ -289,7 +280,8 @@ export function ReleaseWorkflow(
       test: new TestsJob(name, "test", opts),
       publish: new PublishJob("publish", opts),
       publish_sdk: new PublishSDKJob("publish_sdks"),
-      publish_java_sdk: new PublishJavaSDKJob("publish_java_sdk"),
+      // I don't understand java publishing
+      // publish_java_sdk: new PublishJavaSDKJob("publish_java_sdk"),
       publish_go_sdk: new PublishGoSdkJob(),
       dispatch_docs_build: new DocsBuildDispatchJob("dispatch_docs_build"),
     },
@@ -375,63 +367,12 @@ export function Cf2PulumiReleaseWorkflow(
   };
 }
 
-// creates arm2pulumi-coverage-report.yml
-export function Arm2PulumiCoverageReportWorkflow(
-  name: string,
-  opts: WorkflowOpts
-): GithubWorkflow {
-  return {
-    name: name,
-    on: {
-      schedule: [
-        {
-          cron: "35 17 * * *",
-        },
-      ],
-      workflow_dispatch: {},
-    },
-    env: env(opts),
-    jobs: {
-      "generate-coverage": new Arm2PulumiCoverageReport("coverage-report"),
-    },
-  };
-}
-
-// creates arm2pulumi-release.yml
-export function Arm2PulumiReleaseWorkflow(
-  name: string,
-  opts: WorkflowOpts
-): GithubWorkflow {
-  return {
-    name: name,
-    on: {
-      push: {
-        tags: ["v*.*.*", "!v*.*.*-**"],
-      },
-      workflow_dispatch: {
-        inputs: {
-          version: {
-            description:
-              "The version of the binary to deploy - do not include the pulumi prefix in the name.",
-            required: true,
-            type: "string",
-          },
-        },
-      },
-    },
-    env: env(opts),
-    jobs: {
-      release: new Arm2PulumiRelease("release"),
-    },
-  };
-}
-
 // This section represents sub-jobs that may be used in more than one workflow
 
 export class BuildSdkJob implements NormalJob {
   needs = "prerequisites";
 
-  "runs-on" = "pulumi-ubuntu-8core"; // insufficient resources to run Go builds on ubuntu-latest
+  "runs-on" = "ubuntu-latest"; // not sure how I plan to resolve the issue with go builds
 
   strategy = {
     "fail-fast": true,
@@ -473,7 +414,6 @@ export class BuildSdkJob implements NormalJob {
       steps.Porcelain(),
       steps.ZipSDKsStep(),
       steps.UploadSDKs(tag),
-      steps.NotifySlack("Failure while building SDKs"),
     ].filter((step: Step) => step.uses !== undefined || step.run !== undefined);
     Object.assign(this, { name });
   }
@@ -521,15 +461,12 @@ export class PrerequisitesJob implements NormalJob {
       steps.MakeKubernetesProvider(opts.provider),
       steps.CheckSchemaChanges(opts.provider),
       steps.CommentSchemaChangesOnPR(opts.provider),
-      steps.LabelIfNoBreakingChanges(opts.provider),
       steps.BuildProvider(opts.provider),
       steps.CheckCleanWorkTree(),
       steps.Porcelain(),
       steps.TarProviderBinaries(opts.hasGenBinary),
       steps.UploadProviderBinaries(),
       steps.TestProviderLibrary(),
-      steps.Codecov(),
-      steps.NotifySlack("Failure in building provider prerequisites"),
     ].filter((step: Step) => step.uses !== undefined || step.run !== undefined);
     Object.assign(this, { name });
   }
@@ -547,7 +484,7 @@ export class PrerequisitesJob implements NormalJob {
 }
 
 export class TestsJob implements NormalJob {
-  "runs-on" = "pulumi-ubuntu-8core"; // insufficient resources to run Go builds on ubuntu-latest, specifically for K8S
+  "runs-on" = "ubuntu-latest"; // not sure how I plan to resolve the issue with go builds, if its only k8s we're good
 
   needs = ["build_sdks"];
   strategy = {
@@ -606,7 +543,6 @@ export class TestsJob implements NormalJob {
       steps.InstallSDKDeps(),
       steps.MakeKubeDir(opts.provider, workflowName),
       steps.DownloadKubeconfig(opts.provider, workflowName),
-      steps.ConfigureAwsCredentialsForTests(opts.aws),
       steps.GoogleAuth(opts.gcp),
       steps.SetupGCloud(opts.gcp),
       steps.InstallKubectl(opts.provider),
@@ -614,7 +550,6 @@ export class TestsJob implements NormalJob {
       steps.SetupGotestfmt(),
       steps.CreateKindCluster(opts.provider, workflowName),
       steps.RunTests(opts.provider, workflowName),
-      steps.NotifySlack("Failure in SDK tests"),
     ].filter((step: Step) => step.uses !== undefined || step.run !== undefined);
     Object.assign(this, { name: jobName });
   }
@@ -759,11 +694,9 @@ export class PublishPrereleaseJob implements NormalJob {
       steps.FreeDiskSpace(this["runs-on"]),
       steps.InstallPulumiCtl(),
       steps.InstallPulumiCli(opts.pulumiCLIVersion),
-      steps.ConfigureAwsCredentialsForPublish(),
       steps.RunGoReleaserWithArgs(
         `-p ${opts.parallel} -f .goreleaser.prerelease.yml --clean --skip=validate --timeout ${opts.timeout}m0s`
       ),
-      steps.NotifySlack("Failure in publishing binaries"),
     ].filter((step: Step) => step.uses !== undefined || step.run !== undefined);
     Object.assign(this, { name });
   }
@@ -788,11 +721,9 @@ export class PublishJob implements NormalJob {
       steps.FreeDiskSpace(this["runs-on"]),
       steps.InstallPulumiCtl(),
       steps.InstallPulumiCli(opts.pulumiCLIVersion),
-      steps.ConfigureAwsCredentialsForPublish(),
       steps.RunGoReleaserWithArgs(
         `-p ${opts.parallel} release --clean --timeout ${opts.timeout}m0s`
       ),
-      steps.NotifySlack("Failure in publishing binaries"),
     ].filter((step: Step) => step.uses !== undefined || step.run !== undefined);
   }
 }
@@ -824,7 +755,6 @@ export class PublishSDKJob implements NormalJob {
       steps.UnzipSpecificSDKStep("nodejs"),
       steps.InstallTwine(),
       steps.RunPublishSDK(),
-      steps.NotifySlack("Failure in publishing SDK"),
     ];
   }
 }
@@ -918,32 +848,6 @@ export class Arm2PulumiRelease implements NormalJob {
   }
 }
 
-export class Arm2PulumiCoverageReport implements NormalJob {
-  "runs-on" = "ubuntu-latest";
-  steps = [
-    steps.CheckoutRepoStep(),
-    steps.InstallGo(goVersion),
-    steps.InstallPulumiCtl(),
-    steps.InstallPulumiCli(),
-    steps.AzureLogin("azure-native"),
-    steps.MakeClean(),
-    steps.InitializeSubModules(true),
-    steps.BuildCodegenBinaries("azure-native"),
-    steps.MakeLocalGenerate(),
-    steps.BuildProvider("azure-native"),
-    steps.GenerateCoverageReport(),
-    steps.TestResultsJSON(),
-    steps.AwsCredentialsForArmCoverageReport(),
-    steps.UploadArmCoverageToS3(),
-  ];
-  name: string;
-
-  constructor(name: string) {
-    this.name = name;
-    Object.assign(this, { name });
-  }
-}
-
 export class WeeklyPulumiUpdate implements NormalJob {
   "runs-on" = "ubuntu-latest";
   steps: NormalJob["steps"];
@@ -983,7 +887,6 @@ export class NightlySdkGeneration implements NormalJob {
       steps.InstallGo(goVersion),
       steps.InstallPulumiCtl(),
       steps.InstallPulumiCli(opts.pulumiCLIVersion),
-      steps.ConfigureAwsCredentialsForTests(opts.aws),
       steps.AzureLogin(opts.provider),
       steps.MakeClean(),
       steps.PrepareGitBranchForSdkGeneration(),
@@ -996,7 +899,6 @@ export class NightlySdkGeneration implements NormalJob {
       steps.CommitAutomatedSDKUpdates(opts.provider),
       steps.PullRequestSdkGeneration(opts.provider, opts.defaultBranch),
       // steps.SetPRAutoMerge(opts.provider),
-      steps.NotifySlack("Failure during automated SDK generation"),
     ].filter((step: Step) => step.uses !== undefined || step.run !== undefined);
     Object.assign(this, { name });
   }
